/* RECALL:
subqueries -> query within query
- can do select/from/where/having clauses
- inside () is executed first
*/

SELECT *
FROM ( -- subqueries start here
    SELECT *
    FROM job_postings_fact
    WHERE EXTRACT(MONTH FROM job_posted_date) = 1
    )
    AS january_jobs; -- ends here

-- CTEs: common table expression
-- use WITH
-- within () -> can do select/insert/update/delete statement
WITH january_jobs AS ( -- CTE starts 
    SELECT *
    FROM job_postings_fact
    WHERE EXTRACT(MONTH FROM job_posted_date) = 1
    )   

SELECT *
FROM january_jobs;


-- EXAMPLE: want no degree required
SELECT 
    company_id,
    name AS company_name    
FROM company_dim
WHERE company_id IN (
    SELECT 
        company_id
    FROM 
        job_postings_fact
    WHERE
        job_no_degree_mention = true
    ORDER BY company_id
)

-- now, use CTEs
-- find companies with the most job openings

/* KEY: write inside out - start with select, from like usual then add with
1st: get the total # of job postings per company_id (job_posting_fact)
2nd: return total number with company names (company_dim)
*/

WITH most_jobs AS (
SELECT 
    company_id,
    COUNT(*) AS num_jobs
FROM
    job_postings_fact
GROUP BY 
    company_id 
) 

-- want company names and num_jobs to show
SELECT 
    company_dim.name AS company_name,
    most_jobs.num_jobs
FROM company_dim
LEFT JOIN most_jobs ON 
    most_jobs.company_id = company_dim.company_id
ORDER BY num_jobs desc;


-- PRACTICE
-- identify top 5 skills that are most frequently mentioned in job postings

-- subquery
-- key: find skill_id with the highest counts (skill_job_dim) and join with skills_dim for skill names

WITH num_jobs_id AS (
SELECT
    skill_id,
    COUNT(job_id) AS num_jobs
FROM skills_job_dim
GROUP BY skill_id
)

SELECT 
    skills,
    num_jobs
FROM skills_dim
LEFT JOIN num_jobs_id ON
    skills_dim.skill_id = num_jobs_id.skill_id
ORDER BY num_jobs desc;

-- PRACTICE
-- find the count of # remote posting jobs per skills for data analyst
-- display top 5 skills by demand in remote jobs
-- include skills id, name of skills, and count of posting

WITH remote_job_skills AS(
SELECT 
    skill_id,
    COUNT(*) AS skill_count
FROM skills_job_dim
INNER JOIN job_postings_fact ON
    job_postings_fact.job_id = skills_job_dim.job_id 
WHERE 
    job_postings_fact.job_work_from_home = True AND
    job_title_short = 'Business Analyst'
GROUP BY skill_id
)

SELECT 
    skills_dim.skill_id,
    skills,
    skill_count
FROM remote_job_skills
INNER JOIN skills_dim On
    skills_dim.skill_id = remote_job_skills.skill_id
ORDER BY skill_count desc
LIMIT 5;

